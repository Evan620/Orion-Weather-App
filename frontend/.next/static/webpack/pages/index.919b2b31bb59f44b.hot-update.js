"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./hooks/useWeather.ts":
/*!*****************************!*\
  !*** ./hooks/useWeather.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWeather: function() { return /* binding */ useWeather; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// Use real API data\nconst useMockData = false;\n// Sample mock data for frontend testing\nconst generateMockWeatherData = (cityName)=>{\n    return {\n        dt: Math.floor(Date.now() / 1000),\n        name: cityName,\n        main: {\n            temp: 15.25,\n            feels_like: 14.8,\n            temp_min: 12.78,\n            temp_max: 16.99,\n            pressure: 1024,\n            humidity: 76\n        },\n        weather: [\n            {\n                id: 801,\n                main: \"Clouds\",\n                description: \"few clouds\",\n                icon: \"02d\"\n            }\n        ],\n        wind: {\n            speed: 3.6,\n            deg: 250\n        },\n        sys: {\n            country: \"GB\"\n        },\n        coord: {\n            lat: 51.5074,\n            lon: -0.1278\n        }\n    };\n};\nconst generateMockForecastData = ()=>{\n    return [\n        {\n            date: Math.floor(Date.now() / 1000) + 86400,\n            temp: 16.2,\n            temp_min: 13.1,\n            temp_max: 17.8,\n            weather: {\n                id: 800,\n                main: \"Clear\",\n                description: \"clear sky\",\n                icon: \"01d\"\n            },\n            wind_speed: 4.1,\n            humidity: 65\n        },\n        {\n            date: Math.floor(Date.now() / 1000) + 172800,\n            temp: 17.5,\n            temp_min: 14.2,\n            temp_max: 19.1,\n            weather: {\n                id: 803,\n                main: \"Clouds\",\n                description: \"broken clouds\",\n                icon: \"04d\"\n            },\n            wind_speed: 3.8,\n            humidity: 68\n        },\n        {\n            date: Math.floor(Date.now() / 1000) + 259200,\n            temp: 14.8,\n            temp_min: 12.5,\n            temp_max: 16.3,\n            weather: {\n                id: 500,\n                main: \"Rain\",\n                description: \"light rain\",\n                icon: \"10d\"\n            },\n            wind_speed: 5.2,\n            humidity: 82\n        }\n    ];\n};\nconst useWeather = function() {\n    let defaultUnit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"celsius\";\n    const [currentWeather, setCurrentWeather] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [forecast, setForecast] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchWeatherData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async function(city) {\n        let unit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultUnit;\n        setLoading(true);\n        setError(null);\n        try {\n            if (useMockData) {\n                // Use mock data for frontend testing until backend is ready\n                setTimeout(()=>{\n                    // Convert temperatures based on the selected unit if needed\n                    const mockWeatherData = generateMockWeatherData(city);\n                    const mockForecastData = generateMockForecastData();\n                    if (unit === \"fahrenheit\") {\n                        // Convert mock temperature data to Fahrenheit\n                        setCurrentWeather({\n                            ...mockWeatherData,\n                            main: {\n                                ...mockWeatherData.main,\n                                temp: mockWeatherData.main.temp * 9 / 5 + 32,\n                                feels_like: mockWeatherData.main.feels_like * 9 / 5 + 32,\n                                temp_min: mockWeatherData.main.temp_min * 9 / 5 + 32,\n                                temp_max: mockWeatherData.main.temp_max * 9 / 5 + 32\n                            }\n                        });\n                        setForecast(mockForecastData.map((day)=>({\n                                ...day,\n                                temp: day.temp * 9 / 5 + 32,\n                                temp_min: day.temp_min * 9 / 5 + 32,\n                                temp_max: day.temp_max * 9 / 5 + 32\n                            })));\n                    } else {\n                        setCurrentWeather(mockWeatherData);\n                        setForecast(mockForecastData);\n                    }\n                    setLoading(false);\n                }, 800); // Simulate network delay\n                return;\n            }\n            // Real API implementation for when backend is ready\n            const API_BASE_URL = \"http://localhost:8000/api\";\n            // Fetch current weather data\n            const weatherResponse = await fetch(\"\".concat(API_BASE_URL, \"/weather?city=\").concat(encodeURIComponent(city), \"&units=\").concat(unit));\n            if (!weatherResponse.ok) {\n                const errorData = await weatherResponse.json();\n                throw new Error(errorData.message || \"Failed to fetch weather data\");\n            }\n            const weatherData = await weatherResponse.json();\n            setCurrentWeather(weatherData);\n            // Fetch forecast data\n            const forecastResponse = await fetch(\"\".concat(API_BASE_URL, \"/forecast?city=\").concat(encodeURIComponent(city), \"&units=\").concat(unit));\n            if (!forecastResponse.ok) {\n                const errorData = await forecastResponse.json();\n                throw new Error(errorData.message || \"Failed to fetch forecast data\");\n            }\n            const forecastData = await forecastResponse.json();\n            setForecast(forecastData);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"An unknown error occurred\");\n            setCurrentWeather(null);\n            setForecast(null);\n        } finally{\n            if (!useMockData) {\n                setLoading(false);\n            }\n        }\n    }, [\n        defaultUnit\n    ]);\n    return {\n        currentWeather,\n        forecast,\n        loading,\n        error,\n        fetchWeatherData\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useWeather.ts\n"));

/***/ })

});